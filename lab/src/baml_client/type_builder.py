###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["Answer","ArticleMetadata","Entity","Question",]
        ), enums=set(
          ["EntityType",]
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def Answer(self) -> "AnswerAst":
        return AnswerAst(self)

    @property
    def ArticleMetadata(self) -> "ArticleMetadataAst":
        return ArticleMetadataAst(self)

    @property
    def Entity(self) -> "EntityAst":
        return EntityAst(self)

    @property
    def Question(self) -> "QuestionAst":
        return QuestionAst(self)





class AnswerAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Answer")
        self._properties: typing.Set[str] = set([ "language",  "answer",  "sources",  "next_hop", ])
        self._props = AnswerProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AnswerProperties":
        return self._props


class AnswerViewer(AnswerAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class AnswerProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def language(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("language"))

    @property
    def answer(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("answer"))

    @property
    def sources(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("sources"))

    @property
    def next_hop(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("next_hop"))

    

class ArticleMetadataAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ArticleMetadata")
        self._properties: typing.Set[str] = set([ "entities",  "triples", ])
        self._props = ArticleMetadataProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ArticleMetadataProperties":
        return self._props


class ArticleMetadataViewer(ArticleMetadataAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ArticleMetadataProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def entities(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("entities"))

    @property
    def triples(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("triples"))

    

class EntityAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Entity")
        self._properties: typing.Set[str] = set([ "name",  "type", ])
        self._props = EntityProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "EntityProperties":
        return self._props


class EntityViewer(EntityAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class EntityProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("name"))

    @property
    def type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("type"))

    

class QuestionAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Question")
        self._properties: typing.Set[str] = set([ "question", ])
        self._props = QuestionProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "QuestionProperties":
        return self._props


class QuestionViewer(QuestionAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class QuestionProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def question(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("question"))

    



class EntityTypeAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("EntityType")
        self._values: typing.Set[str] = set([ "Game",  "Console",  "Publisher", ])
        self._vals = EntityTypeValues(self._bldr, self._values)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "EntityTypeValues":
        return self._vals


class EntityTypeViewer(EntityTypeAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    def list_values(self) -> typing.List[typing.Tuple[str, EnumValueViewer]]:
        return [(name, EnumValueViewer(self._bldr.value(name))) for name in self._values]


class EntityTypeValues:
    def __init__(self, enum_bldr: EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values

    

    @property
    def Game(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("Game"))
    

    @property
    def Console(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("Console"))
    

    @property
    def Publisher(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("Publisher"))
    

    


__all__ = ["TypeBuilder"]